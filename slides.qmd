---
title: "Dependency Management in R and Python"
author: "Flavio Hafner"
date: 01/30/2025
format: 
  revealjs:
    theme: default
    slide-number: true
editor: visual
---

## Why track dependencies

-   You want your code still to run in 2 years
    -   Your dependencies' functionality may change; there may be bug fixes
-   A project might depend on the specific version of a package
    -   But you may want to use newer versions where possible in other projects
-   Make your tools portable
    -   For yourself
    -   For your co-authors

<!-- do not want to install each package separately, try if the code runs, and repeat -->

## The high-level idea

| DIY Project | R/Python Project |
|----|----|
| 🏪 Hardware store | Repository (CRAN, PyPI) |
| 🗄 The storage shelf in your garage | The folder with Python/R libraries |
| 🧰 Toolboxes (the drill box, the box of screwdrivers) | Packages (ggplot2, etc.) |
| 🪑 Workbench | Environment: `renv`, `venv` |

## The environment is an isolated workspace with all tools

-   An environment is defined by a file with metadata on
    -   Which packages, which versions, from where
    -   From where (repository, github)
-   Metadata are stored in requirements and lock files
    -   They allow anyone to recreate the dependencies in the same way
-   This metadata should be under version control
    -   So that you can track changes and share with others

::: {.section .transition-slide}
# R: Using `renv`
:::

## Create a new project in RStudio

1.  Install `renv` globally with

``` r
install.packages("renv")
```

2.  Create new project with version control (git)\
    (File -\> New Project -\> Version Control -\> Git)
3.  Open the project in a new session

## Install and track packages with `renv`

4.  Attach `renv` to your R session with

``` r
library(renv)
```

5.  Initialize the renv

``` r
renv::init(bare = TRUE)
```

This creates TODO: show in steps

-   `renv/` -- A new folder that serves as the **library** of packages for your project.
-   `.Rprofile` -- This file makes sure that once `renv` is turned on for a project, it stays on.

<!-- 6. Check that R looks for packages in the right place: -->

<!-- ```{r, echo=TRUE} -->

<!-- .libPaths()[1] -->

<!-- ``` -->

## Create lock file to log project state

``` r
renv::snapshot()
```

yields something like

``` json
{
  "R": {
    "Version": "4.4.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
      "rlang": {
      "Package": "rlang",
      "Version": "1.1.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "utils"
      ],
      "Hash": "3eec01f8b1dee337674b2e34ab1f9bc1"
    }
  }
}
```

## The lock file records dependencies only when used in scripts:

1.  Install new packages with

``` r
renv::install(dplyr)
```

2.  Use it in a script

``` r
library(dplyr) # or require(dplyr)
```

3.  Update lock file

``` r
renv::snapshot()
```

## Restoring and checking

![Source: rstudio.github.io](renv.png){width="50%"}

::: {.section .transition-slide}
# Python: Using `venv` and `pip`

![Python Environment Hell from XKCD (Creative Commons Attribution-NonCommercial 2.5 License)](python-environment-hell.png){width="50%"}
:::

## Overview

-   PyPI is the Python Package Index, the analogue to R's CRAN
-   `pip` is the Python package manager and interacts with PyPI
    -   Other tools do the same job
-   `pip` + `venv` are available by default for Python 3.3+

## Getting started

Use the command line: a terminal or from an IDE (VS Code)

Make sure you can invoke Python

``` bash
$ python3 --version # on Mac/Linux
$ python --version # on Windows — Windows installation comes with a python.exe file rather than a python3.exe file 
```

## Creating the virtual environment

``` bash
$ python3 -m venv venv
```

What does this do?

-   Creates a folder `venv` to which packages are installed
-   The `-m` flag calls the `main` part of the `venv` module (not so important)

Activate the virtual environment

::: panel-tabset
## Windows

``` powershell
$ source venv/Scripts/activate
(venv) $
```

## Mac/Linux

``` bash
$ source venv/bin/activate
(venv) $
```
:::

## Install packages with pip

``` bash
(venv) $ python3 -m pip install numpy
(venv) $ python3 -m pip install matplotlib
```

To display information about installed packages

``` bash
(venv) $ python3 -m pip show numpy
```

To display information about all installed packages

``` bash
(venv) $ python3 -m pip list
```

## Requirement files

``` bash
(venv) $ python3 -m pip freeze > requirements.txt
```

We can inspect the requirements file

``` bash
(venv) $ cat requirements.txt
```

``` output
contourpy==1.2.0
cycler==0.12.1
fonttools==4.45.0
kiwisolver==1.4.5
matplotlib==3.8.2
numpy==1.26.2
packaging==23.2
Pillow==10.1.0
pyparsing==3.1.1
python-dateutil==2.8.2
six==1.16.0
```

Restore a environment from requirements.txt:

``` bash
(venv) $ python3 -m pip install -r requirements.txt
```

## PyPI vs conda

| PyPI | conda |
|----|----|
| Easy to use & create packages | Not only Python, can use external libraries |
| Does not track Python version | Tracks Python version |
| Complicated with external libraries | Heavy -- use miniconda/mamba; packaging is harder |

 

... And try to keep them apart whenever possible

::: {.section .transition-slide}
# Conclusion
:::

## Good practices

-   Have the environment inside your project directory
-   While project is in progress, do not pin versions

``` bash
# prefer
(venv) $ python3 -m pip install numpy
# over
(venv) $ python3 -m pip install numpy==1.26.2
```

-   But keep track of exact versions and commit often
    -   Share with your co-authors

## Other considerations

-   Adding dependencies is always a make-or-buy decision
    -   Don't reinvent the wheel -- but sometimes it's necessary
-   Before adding dependencies, it's good to
    -   Consider different tools for the task
    -   Does it work as intended?
    -   Check if they are maintained and the size of the user base
-   Be aware of security risks
    -   [CI/CD vulnerability in pytorch](https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/) in 2024

## References & further reading

For R:

-   [TSB Research Support Team: Intermediate R](https://gitlab.uvt.nl/tsb-rst/intermediate-level-r-course-for-social-sciences)
-   [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html)

For Python:

-   [Code refinery: Reproducible environments and dependencies](https://coderefinery.github.io/python-progression/dependencies/)
-   [Intermediate Research Software Development with Python: virtual environments](https://carpentries-incubator.github.io/python-intermediate-development/12-virtual-environments.html)

## Hands-on: ideas

TODO: add tiny url for slides

-   Start using an environment for an existing project
-   Play around in a dummy project
    -   If you're using `pip` or `conda`, try the other, or try `uv`
